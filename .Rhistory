statusDF$tweetType <- droplevels(tweetType)
qplot(date, data = statusDF,
geom = "bar", fill = tweetType, position = "fill")
qplot(date, data = statusDF,
geom = "bar", fill = tweetType, position = "fill")
View(tweetDF)
score <- colSums(tweetDF[4:(ncol(tweetDF) - 1)] * tweetDF$value)
View(tweetDF)
#ここからネガポジ
tweetDF <- docDF(statusDF, column = "cleanText", type = 1, pos = pos)
# pndic に登録されている単語のみ抽出
tweetDF <- subset(tweetDF, TERM %in% pndic2$term)
# 単語極性スコアを付与
tweetDF <- merge(tweetDF, pndic2, by.x = c("TERM", "POS1"), by.y = c("term", "pos"))
# 単語の出現回数にスコアを掛けて総和を取る
score <- colSums(tweetDF[4:(ncol(tweetDF) - 1)] * tweetDF$value)
setwd("D:/skydrive/R/speech/twitteR")
#ここからツイートの処理。予めディレクトリに移動する
jimin<-read.csv("jimintou.csv",fileEncoding="utf-8",header=FALSE)
statusDF <- twListToDF(jimin)
rejimin <- within(statusDF, {
# ユーザ名, URL, ハッシュタグを削除
cleanText <- removeSpecialStr(text)
})
statusDF<-read.csv("jimintou.csv",fileEncoding="cp932",header=FALSE)
View(statusDF)
#ここからツイートの処理。予めディレクトリに移動する
rejimin <- within(statusDF, {
# ユーザ名, URL, ハッシュタグを削除
cleanText <- removeSpecialStr(V4)
})
View(rejimin)
statusDF<-rejimin
#ここからネガポジ
tweetDF <- docDF(statusDF, column = "cleanText", type = 1, pos = pos)
# pndic に登録されている単語のみ抽出
tweetDF <- subset(tweetDF, TERM %in% pndic2$term)
# 単語極性スコアを付与
tweetDF <- merge(tweetDF, pndic2, by.x = c("TERM", "POS1"), by.y = c("term", "pos"))
# 単語の出現回数にスコアを掛けて総和を取る
score <- colSums(tweetDF[4:(ncol(tweetDF) - 1)] * tweetDF$value)
m <- mean(score)
# 平均スコアでポジティブとネガティブを分離
tweetType <- factor(ifelse(score > m, "positive",
ifelse(score == m, "neutral", "negative")),
levels = c("positive", "neutral", "negative"))
statusDF$tweetType <- droplevels(tweetType)
print(qplot(x = factor(1), geom = "bar", fill = tweetType) + coord_polar(theta = "y"))
statusDF$tweetType <- droplevels(tweetType)
qplot(date, data = statusDF,
geom = "bar", fill = tweetType, position = "fill")
qplot(date, data = statusDF,
geom = "bar", fill = tweetType, position = "fill")
View(statusDF)
print(qplot(x = factor(1), geom = "bar", fill = tweetType) + coord_polar(theta = "y"))
#可視化する
print(qplot(x = factor(1), geom = "bar", fill = tweetType) + coord_polar(theta = "y"))
scoreType <- factor(ifelse(score > 0, "positive",
ifelse(score == 0, "neutral", "negative")),
levels = c("positive", "neutral", "negative"))
statusDF$scoreType <- droplevels(scoreType)
#可視化する
print(qplot(x = factor(1), geom = "bar", fill = scoreType) + coord_polar(theta = "y"))
require(RMeCab)
require(ggplot2)
require(reshape2)
require(plyr)
statusDF<-read.csv("/Users/KuriMac/OneDrive/R/speech/twitteR/abeandanpo/abeanpover2.csv",fileEncoding="utf-8",header=TRUE,sep="")
statusDF<-read.csv("/Users/KuriMac/OneDrive/R/speech/twitteR/abeandanpo/abeanpover2.csv",fileEncoding="utf-8",header=TRUE)
pndic <- read.table("http://www.lr.pi.titech.ac.jp/~takamura/pubs/pn_ja.dic",
sep = ":",
col.names = c("term", "kana", "pos", "value"),
colClasses = c("character", "character", "factor", "numeric"),
fileEncoding = "Shift_JIS")
# 名詞＋品詞で複数の候補がある場合は平均値を採用
# 「アイス」の読みとして「アイス」、「アイスホッケー」が割り当てられている例もある
pndic2 <- aggregate(value ~ term + pos, pndic, mean)
# pndic に登録されている品詞のみ抽出
pos <- unique(pndic2$pos)
#ここからネガポジ
tweetDF <- docDF(statusDF, column = "cleanText", type = 1, pos = pos)
# pndic に登録されている単語のみ抽出
tweetDF <- subset(tweetDF, TERM %in% pndic2$term)
# 単語極性スコアを付与
tweetDF <- merge(tweetDF, pndic2, by.x = c("TERM", "POS1"), by.y = c("term", "pos"))
# 単語の出現回数にスコアを掛けて総和を取る
score <- colSums(tweetDF[4:(ncol(tweetDF) - 1)] * tweetDF$value)
View(statusDF)
View(tweetDF)
statusDF$score<-droplevels(score)
statusDF$score<-score
View(statusDF)
scoave1<-subset(statusDF$score,hour==12 & date=="2015-07-27")
scoave1<-subset(statusDF$score,statusDF$hour==12 & statusDF$date=="2015-07-27")
example(aggregate)
View(ag)
aggregate(statusDF$score,list(statusDF$hour==12,date="2015-07-19"),mean)
aggregate(statusDF$score,list(statusDF$hour==12,statusDF$date="2015-07-19"),mean)
aggregate(statusDF$score,list(statusDF$hour==12,statusDF$date=="2015-07-19"),mean)
require(data.table)
install.packages(data.table)
install.packages("data.table")
require(data.table)
dt<-data.table(statusDF)
View(dt)
dt[,mean(score),by = hour & date]
dt[,mean(score),by = hour]
require(dplyr)
install.packages("dplyr")
st<-gropu_by(statusDF,hour,date)
st<-group_by(statusDF,hour,date)
require(dplyr)
st<-group_by(statusDF,hour,date)
st<-group_by(statusDF$score,hour,date)
View(st)
summarise(st,st.average=mean(st$score))
summarise(st$score,st.average=mean(st$score))
summarise(st,average=mean(st$score))
summarise(st,a=mean(st$score),)
dt[,mean(score),by = hour,date]
dt[,mean(score),by = list(hour,date)]
avescore<-dt[,mean(score),by = list(hour,date)]
View(avescore)
vlookup <- merge(dt,avescore,by.x="hour",by.y="date")
vlookup <- merge(dt,avescore,by=c("hour","date"))
View(vlookup)
vlookup$V1<-vlookup$avescore
View(vlookup)
vlookup <- merge(dt,avescore,by=c("hour","date"))
View(vlookup)
vlookup$avescore<-vlookup$V1
View(vlookup)
vlookup[,V1:=NULL]
View(vlookup)
vlookup$tweettype2<-factor(ifelse(score > avescore, "positive",
ifelse(score == avescore, "neutral", "negative")),
levels = c("positive", "neutral", "negative"))
View(vlookup)
class(vlookup$avescore)
class(vlookup$score)
class(vlookup$tweettype2)
vlookup$tweettype2<-factor(ifelse(score > avescore, "positive",
ifelse(score == avescore, "neutral", "negative")),
levels = c("positive", "neutral", "negative"))
tweettype2 <- factor(ifelse(vlookup$score > vlookup$avescore, "positive",
ifelse(score == m, "neutral", "negative")),
levels = c("positive", "neutral", "negative"))
tweettype2 <- factor(ifelse(vlookup$score > vlookup$avescore, "positive",
ifelse(vlookup$score == vlookup$avescore, "neutral", "negative")),
levels = c("positive", "neutral", "negative"))
vlookup$tweettype2 <- droplevels(tweettype2)
View(vlookup)
negaposi2<-cbind(vlookup$hour,vlookup$date,vlookup$tweettype2)
negaposi2<-data.table(negaposi2)
View(negaposi2)
negaposi2<-cbind(vlookup$hour,vlookup$date,vlookup$tweettype2)
negaposi2<-data.frame(negaposi2)
View(negaposi2)
View(vlookup)
negaposi2<-vlookup[hour,date,tweettype2]
negaposi2<-vlookup[,c("hour","date","tweettype2")]
negaposi2<-data.frame(negposi2)
negaposi2<-data.frame(negaposi2)
View(negaposi2)
negaposi2<-vlookup[,c(vlookup$hour,vllokup$date,vlookup$tweettype2)]
negaposi2<-vlookup[,c(vlookup$hour,vlookup$date,vlookup$tweettype2)]
negaposi2<-data.frame(negaposi2)
View(negaposi2)
negaposi2<-vlookup[,c(1,2,20,21,22)]
negaposi2<-data.frame(negaposi2)
View(negaposi2)
vlookup[,1]
class(vlookup)
colnames(vlookup)
negaposi2<-vlookup
negaposi2<-negaposi2[,c(1,2,20,21,22)]
negaposi2<-vlookup
negaposi2<-data.frame(negaposi2)
negaposi2<-negaposi2[,c(1,2,20,21,22)]
View(negaposi2)
class(negaposi2$date)
class(negaposi2$hour)
negaposi2$date_hour<-paste(negaposi2$date,"",negaposi2$hour,":00:00")
View(negaposi2)
negaposi2$date_hour<-as.POSIXct(negaposi2$date_hour)
View(negaposi2)
negaposi2$date_hour<-paste(negaposi2$date,"",negaposi2$hour,":00:00")
negaposi2$date_hour<-as.POSIXlt(negaposi2$date_hour)
View(negaposi2)
negaposi2$date_hour<-paste(negaposi2$date,"",negaposi2$hour,":00:00")
View(negaposi2)
negaposi2$date_hour<-paste(negaposi2$date,negaposi2$hour,":00:00")
View(negaposi2)
class(negaposi2$hour)
negaposi2$hours<-as.factor'negaposi2$hour'
negaposi2$hours<-as.factor(negaposi2$hour)
View(negaposi2)
negaposi2$date_hour<-paste(negaposi2$date,negaposi2$hours,":00:00")
View(negaposi2)
negaposi2$date_hour<-paste(negaposi2$date,negaposi2$hours,:00:00)
negaposi2$date_hour<-paste(negaposi2$date,negaposi2$hours,":00:00")
class(negaposi2$date)
negaposi2$dates<as.character(negaposi2$date)
class(negaposi2$date)
write.csv(negaposi2,"negaposi2.csv")
negaposi2<-read.csv("negaposi2.csv")
View(negaposi2)
negaposi2$date_hour<-as.POSIXlt(negaposi2$date_hour)
class(negaposi2$date_hour)
require(reshape2)
table(subset(negaposi2,select=c(date_hour,tweettype2)))
class(negaposi2$tweettype2)
negaposi2$date_hour<-as.factor(negaposi2$date_hour)
negaposi2$date_hour<-as.vector(negaposi2$date_hour)
table(subset(negaposi2,select=c(date_hour,tweettype2)))
View(negaposi2)
negaposi2<-read.csv("negaposi2.csv")
negaposi2$date_hour<-as.POSIXlt(negaposi2$date_hour)
View(negaposi2)
negaposi2<-read.csv("negaposi2.csv")
View(negaposi2)
negaposi2$date_hour<-as.POSIXlt(negaposi2$date_hour)
View(negaposi2)
negaposi2<-read.csv("negaposi2.csv")
class(negaposi2$date_hour)
View(negaposi2)
negaposi2<-read.csv("negaposi2.csv")
View(negaposi2)
negaposi2$date_hour<-as.POSIXlt(negaposi2$date_hour)
View(negaposi2)
negaposi2<-read.csv("negaposi2.csv")
View(negaposi2)
negaposi2<-read.csv("negaposi2.csv")
View(negaposi2)
negaposi2$date_hour<-as.POSIXlt(negaposi2$date_hour)
View(negaposi2)
negaposi2<-read.csv("negaposi2.csv")
is.character(negaposi2$date_hour)
negaposi2$date_hour<-as.character(negaposi2$date_hour)
negaposi2$date_hour<-as.POSIXlt(negaposi2$date_hour)
View(negaposi2)
negaposi2<-read.csv("negaposi2.csv")
negaposi2$date_hour<-as.POSIXlt(negaposi2$date_hour,format="%Y-%m-%d %H:%M:%S", tz="Japan")
View(negaposi2)
negaposi2<-read.csv("negaposi2.csv")
View(negaposi2)
require(lubridate)
negaposi2$date_hour<-dmy_hms(negaposi2$date_hour)
negaposi2$date_hour<-as.character(negaposi2$date_hour)
View(negaposi2)
class("2015-07-19 12:00:00")
negaposi2<-read.csv("negaposi2.csv")
negaposi2$date_hour<-dmy_hms(negaposi2$date_hour)
View(negaposi2)
negaposi2$date_hour<-dmy_hms(negaposi2$date_hours)
negaposi2$date_hour<-as.POSIXlt(negaposi2$date_hours,format="%Y-%m-%d %H:%M:%S", tz="Japan")
View(negaposi2)
class(negaposi2$date_hours)
negaposi2$date_hours<-as.character(negaposi2$date_hours)
View(negaposi2)
class(negaposi2$date_hours)
negaposi2$date_hour<-as.POSIXlt(negaposi2$date_hours,format="%Y-%m-%d %H:%M:%S", tz="Japan")
View(negaposi2)
negaposi2$date_hour<-dmy_hms(negaposi2$date_hours)
View(negaposi2)
negaposi2<-read.csv("negaposi2.csv")
View(negaposi2)
strptime(negaposi2$date_hours,"%m/%d/%y %H:%M:%S")
strptime(negaposi2$date_hour_dummy,"%m/%d/%y %H:%M:%S")
negaposi2<-read.csv("negaposi2.csv")
View(negaposi2)
strptime(negaposi2$date_hour,"%m/%d/%y %H:%M:%S")
head(strptime(negaposi2$date_hour,"%m/%d/%y %H:%M:%S"))
head(as.POSIXlt(negaposi2$date_hour))
require(xts)
x.ts<-xts(negaposi2[,-6],as.POSIXlt(negaposi2$date_hour))
head(x.ts)
class(negaposi2$date_hour)
table(subset(negaposi2,select=c(date_hour,tweettype2)))
crosstable<-table(subset(negaposi2,select=c(date_hour,tweettype2)))
crosstable<-data.frame(crosstable)
View(crosstable)
crosstable<-count(negaposi2,date_hour,tweettype2)
View(crosstable)
crosstable<-spread(crosstable,tweettype2,n)
install.packages("tidyr")
require(tidyr)
crosstable<-spread(crosstable,tweettype2,n)
crosstable<-crosstable[is.na(crosstable)]<-0
crosstable<-count(negaposi2,date_hour,tweettype2)
crosstable<-spread(crosstable,tweettype2,n)
head(crosstable[is.na(crosstable)] <- 0)
xts2<-xts(crosstable[,-1],as.POSIXlt(crosstable$date_hour))
View(xts2)
require(dygraphs)
dygraph(xts2,main="抽出されたツイートの感情の推移",group="abeanpo") %>%  dyOptions(colors = c("blue","green","orange")) %>% dyRangeSelector(height=20) %>%  dyHighlight(highlightSeriesOpts = list(strokeWidth = 3))
dygraph(xts2,main="抽出されたツイートの感情の推移(時間ごとの平均)",group="abeanpo") %>%  dyOptions(colors = c("blue","green","orange")) %>% dyRangeSelector(height=20) %>%  dyHighlight(highlightSeriesOpts = list(strokeWidth = 3))
write.csv(vlookup,"negaposiscore.csv")
require(niconico)
# ゆっくりに関連したタグで検索をかける
s1<-getSearch(query = "ゆっくり実況プレイ", size = 100, type = "tag")
s2<-getSearch(query = "ゆっくり実況", size = 100, type = "tag")
s3<-getSearch(query = "ゆっくり", size = 100, type = "tag")
s4<-getSearch(query = "ゆっくり実況プレイpart1リンク", size = 100, type = "tag")
s5<-getSearch(query = "ゆっくりTRPG", size = 100, type = "tag")
s6<-getSearch(query = "ゆっくり解説", size = 100, type = "tag")
s7<-getSearch(query = "ゆっくりロボット物実況", size = 100, type = "tag")
s8<-getSearch(query = "ゆっくり怪談", size = 100, type = "tag")
s9<-getSearch(query = "ゆっくりボイス", size = 100, type = "tag")
s10<-getSearch(query = "ゆっくり実況プレイ最終回リンク", size = 100, type = "tag")
s11<-getSearch(query = "ゆっくり劇場", size = 100, type = "tag")
s12<-getSearch(query = "ゆっくりしていってね！！！", size = 100, type = "tag")
s13<-getSearch(query = "ゆっくり朗読", size = 100, type = "tag")
s14<-getSearch(query = "ゆっくり評価されるべき", size = 100, type = "tag")
s15<-getSearch(query = "多人数ゆっくり実況プレイ", size = 100, type = "tag")
s16<-getSearch(query = "ゆっくり車載", size = 100, type = "tag")
s17<-getSearch(query = "ゆっくりMinecraft", size = 100, type = "tag")
s18<-getSearch(query = "ゆっくりスプラトゥーン", size = 100, type = "tag")
s19<-getSearch(query = "ゆっくりショート怪談リンク", size = 100, type = "tag")
s20<-getSearch(query = "ゆっくり解説Part1リンク", size = 100, type = "tag")
s21<-getSearch(query = "艦娘ゆっくり実況プレイ", size = 100, type = "tag")
s22<-getSearch(query = "ゆっくり旅行", size = 100, type = "tag")
s23<-getSearch(query = "ゆっくりTRPG第一話リンク", size = 100, type = "tag")
s24<-getSearch(query = "ゆっくり実況プレイ単発リンク", size = 100, type = "tag")
s25<-getSearch(query = "ホラーゆっくり実況", size = 100, type = "tag")
s26<-getSearch(query = "本気で歌うゆっくりシリーズ", size = 100, type = "tag")
s27<-getSearch(query = "ホラーゆっくり実況", size = 100, type = "tag")
s28<-getSearch(query = "ゆっくり生活", size = 100, type = "tag")
int<-rbind(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,s28)
```
```{r}
# いらないものはすてる
int<-int[,c(-1,-4,-5,-10,-11)]
# このままだとlistオブジェクトでどうにもならないので、列ごとに適したものに変換する
int$start_time<-as.character(int$start_time)
int$start_time<-as.POSIXlt(int$start_time)
int$comment_counter<-as.numeric(int$comment_counter)
int$length_seconds<-as.numeric(int$length_seconds)
int$view_counter<-as.numeric(int$view_counter)
int$mylist_coutner<-as.numeric(int$mylist_counter)
int$tags<-as.character(int$tags)
taghead<-int$tags
taghead<-data.frame(taghead)
View(taghead)
strsplit(taghead, " ")
strsplit(taghead$taghead, " ")
taghead$taghead<-as.character(taghead$taghead)
strsplit(taghead$taghead, " ")
tags<-strsplit(taghead$taghead, " ")
tags<-data.frame(tags)
head(unique(tags))
unique(tags)
tags<-unlist(tags)
unique(tags)
tags<-data.frame(tags)
View(tags)
colMeans(subset(int,grepl(tags$tags,int$view_counter)))
colMeans(subset(int,grepl(tags$tags,view_counter)))
colMeans(subset(int,grepl(as.character(tags$tags),int$view_counter)))
View(int)
colMeans(subset(int,grepl(tags$tags,int$tags)))
colMeans(subset(int,grepl("ゲーム",int$tags)))
grepl("ゲーム",int$tags)
subset(int,grepl("ゲーム",int$tags)))
subset(int,grepl("ゲーム",int$tags))
colMeans(subset(int$view_counter,grepl("ゲーム",int$tags))
)
int2<-cbind(int$tags,int$view_counter)
View(int2)
names(int2)<-c("tags","view")
int2<-data.frame(int2)
names(int2)<-c("tags","view")
colMeans(subset(int2$view,grepl("ゲーム",int2$tags)))
colMeans(subset(int2,grepl("ゲーム",int2$tags)))
subset(int,grepl("ゲーム",int$tags))
t<-subset(int,grepl("ゲーム",int$tags))
colmeans(t$view)
colMeans(t$view)
View(t)
colMeans(t$view_counter)
mean(t$view_counter)
require(dplyr)
int2<-group_by(int,tags)
int2<-int[,-5]
int2<-group_by(int,tags)
View(int2)
int2<-group_by(int2,tags)
setwd("~/GitHub/niconico_analysis")
require(niconico)
# ゆっくりに関連したタグで検索をかける
s1<-getSearch(query = "ゆっくり実況プレイ", size = 100, type = "tag")
s2<-getSearch(query = "ゆっくり実況", size = 100, type = "tag")
s3<-getSearch(query = "ゆっくり", size = 100, type = "tag")
s4<-getSearch(query = "ゆっくり実況プレイpart1リンク", size = 100, type = "tag")
s5<-getSearch(query = "ゆっくりTRPG", size = 100, type = "tag")
s6<-getSearch(query = "ゆっくり解説", size = 100, type = "tag")
s7<-getSearch(query = "ゆっくりロボット物実況", size = 100, type = "tag")
s8<-getSearch(query = "ゆっくり怪談", size = 100, type = "tag")
s9<-getSearch(query = "ゆっくりボイス", size = 100, type = "tag")
s10<-getSearch(query = "ゆっくり実況プレイ最終回リンク", size = 100, type = "tag")
s11<-getSearch(query = "ゆっくり劇場", size = 100, type = "tag")
s12<-getSearch(query = "ゆっくりしていってね！！！", size = 100, type = "tag")
s13<-getSearch(query = "ゆっくり朗読", size = 100, type = "tag")
s14<-getSearch(query = "ゆっくり評価されるべき", size = 100, type = "tag")
s15<-getSearch(query = "多人数ゆっくり実況プレイ", size = 100, type = "tag")
s16<-getSearch(query = "ゆっくり車載", size = 100, type = "tag")
s17<-getSearch(query = "ゆっくりMinecraft", size = 100, type = "tag")
s18<-getSearch(query = "ゆっくりスプラトゥーン", size = 100, type = "tag")
s19<-getSearch(query = "ゆっくりショート怪談リンク", size = 100, type = "tag")
s20<-getSearch(query = "ゆっくり解説Part1リンク", size = 100, type = "tag")
s21<-getSearch(query = "艦娘ゆっくり実況プレイ", size = 100, type = "tag")
s22<-getSearch(query = "ゆっくり旅行", size = 100, type = "tag")
s23<-getSearch(query = "ゆっくりTRPG第一話リンク", size = 100, type = "tag")
s24<-getSearch(query = "ゆっくり実況プレイ単発リンク", size = 100, type = "tag")
s25<-getSearch(query = "ホラーゆっくり実況", size = 100, type = "tag")
s26<-getSearch(query = "本気で歌うゆっくりシリーズ", size = 100, type = "tag")
s27<-getSearch(query = "ホラーゆっくり実況", size = 100, type = "tag")
s28<-getSearch(query = "ゆっくり生活", size = 100, type = "tag")
int<-rbind(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,s28)
```
```{r}
# いらないものはすてる
int<-int[,c(-1,-4,-5,-10,-11)]
# このままだとlistオブジェクトでどうにもならないので、列ごとに適したものに変換する
int$start_time<-as.character(int$start_time)
int$start_time<-as.POSIXlt(int$start_time)
int$comment_counter<-as.numeric(int$comment_counter)
int$length_seconds<-as.numeric(int$length_seconds)
int$view_counter<-as.numeric(int$view_counter)
int$mylist_coutner<-as.numeric(int$mylist_counter)
int$tags<-as.character(int$tags)
# 唯一存在するタグのみを抽出
taghead<-int$tags
taghead<-data.frame(taghead)
taghead$taghead<-as.character(taghead$taghead)
tags<-strsplit(taghead$taghead, " ")
tags<-data.frame(unlist(tags))
tags<-unique(tags)
names(tags)<-c("tag")
rm(s1)
rm(c(s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,s28)))
rm(c(s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,s28))
rm(list=c(s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,s28))
rm(list=(s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,s28))
for(i in 2:28){rm(paste("s",i))}
rm(s2)
rm(s3)
rm(s4)
rm(s5)
rm(s6)
rm(s7)
rm(s8)
rm(s9)
rm(s9)
int<-read.csv("yukkyuri20151016.csv",fileEncoding="cp932")
# いらないものはすてる
int<-int[,c(-1,-4,-5,-10,-11)]
# このままだとlistオブジェクトでどうにもならないので、列ごとに適したものに変換する
int$start_time<-as.character(int$start_time)
int$start_time<-as.POSIXlt(int$start_time)
int$comment_counter<-as.numeric(int$comment_counter)
int$length_seconds<-as.numeric(int$length_seconds)
int$view_counter<-as.numeric(int$view_counter)
int$mylist_coutner<-as.numeric(int$mylist_counter)
int$tags<-as.character(int$tags)
# 唯一存在するタグのみを抽出
taghead<-int$tags
taghead<-data.frame(taghead)
taghead$taghead<-as.character(taghead$taghead)
tags<-strsplit(taghead$taghead, " ")
tags<-data.frame(unlist(tags))
tags<-unique(tags)
names(tags)<-c("tag")
unique(tags)
m<-unique(tags)
rm(m)
View(int)
tagtag<-int$tags
t<-subset(int$tags,"ゲーム")
tagss<-strsplit(taghead$taghead, " ")
tagss<-unlist(tags)
tagss<-strsplit(int$tags, " ")
tagss<-unlist(tags)
table(tagss)
t1<-table(tagss)
t1<-data.frame(t1)
View(t1)
t1<-table(strsplit(int$tags, " "))
t1<-strsplit(int$tags, " ")
head(unlist(t1))
t1<-unlist(t1)
t1<-data.frame(table(t1))
View(t1)
t2<-subset(t1,Freq>=2)
View(t2)
barplot(t2)
plot(t2)
t2<-order[t2]
t2<-order(t2)
plot(t2)
t2<-subset(t1,Freq>=2)
t2<-order(t2$Freq)
t2<-subset(t1,Freq>=2)
t2<-t2[order(t2$Freq,)]
sortlist<-order(t2$Freq)
t3<-t2[sortlist,]
View(t3)
plot(t3)
require(rmecab)
require(RMecab)
require(RMeCab)
tt<-Ngram(as.character(int$tags),N=2,type=1,pos=c("名詞"))
