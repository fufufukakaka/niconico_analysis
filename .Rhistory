setwd("~/GitHub/niconico_analysis")
require(e1071)
require(randomForest)
require(ggplot2)
# 予め作成したノードリストを読み込む
set<-read.csv("taggraph_nodes.csv",fileEncoding = "CP932")
set<-na.omit(set)
#再生数などの情報は既にポイントで反映していると考え削除しておく。計算結果を最終的にsetに貼って出力しGephiでまた使う
set1<-set[,c(-2,-3,-10,-17,-18,-19)]
plus<-subset(set1,set1$Points>2.5*mean(set1$Points))
minus<-subset(set1,set1$Points<0.05*mean(set1$Points))
plus$culture<-as.factor(1)
minus$culture<-as.factor(0)
trainingset<-data.frame(rbind(plus,minus))
View(trainingset)
View(plus)
plus1<-subset(plus,plus$Id<=698)
View(plus1)
plus1<-subset(plus,plus$Id<=700)
plus1<-plus[c(1:47),]
View(plus1)
plus2<-plus[c(48:94),]
minus1<-minus[c(1:46),]
minus2<-minus[c(47:92),]
learning<-data.frame(rbind(plus1,minus1))
tuning<-data.frame(rbind(plus2,minus2))
View(learning)
importance<-randomForest(learning[,-1],culture~.,importance = TRUE)
learning1<-learning[,-1]
importance<-randomForest(learning1,culture~.,importance = TRUE)
tuneRF(learning1[,-16],learning1[,16],doBest=T)
View(learning1)
class(learning1$culture)
head(learning1[,16])
tuneRF(learning1[,-16],learning1[,16],doBest=T)
class(learning1$ave_starttime)
learning1$ave_starttime<-as.POSIXlt(learning1$ave_starttime)
class(learning1$ave_starttime)
class(ave_length)
class(learning1$ave_length)
class(learning1$Points)
class(learning1$Eccentricity)
tuneRF(learning1[,-16],learning1[,16],doBest=T)
class(learning1$次数)
class(learning1$Weighted.Degree)
class(learning1$Authority)
learning1$Authority<-as.numeric(learning1$Authority)
sapply(learning1,class)
learning1$Hub<-as.numeric(learning1$Hub)
tuneRF(learning1[,-16],learning1[,16],doBest=T)
learning1<-learning1[,-4]
View(learning1)
tuneRF(learning1[,-15],learning1[,15],doBest=T)
d.rf<-randomForest(culture~.,learning1,mtry=2)
tuneRF(learning1[,c(-12,-15)],learning1[,15],doBest=T)
d.rf<-randomForest(culture~.,learning1[,-12],mtry=2)
importance(d.rf)
d.rf<-randomForest(culture~.,learning1[,c(-12,-14)],mtry=2)
importance(d.rf)
tuneRF(learning1[,c(-12,-14,-15)],learning1[,15],doBest=T)
View(set)
View(learning)
learning1<-learning[,c(-1,-5,-16)]
learning1$ave_starttime<-as.numeric(learning1$ave_starttime)
learning1$Authority<-as.numeric(learning1$Authority)
View(learning1)
tuneRF(learning1[,-14],learning1[,14],doBest=T)
importance<-randomForest(learning1,culture~.,mtry=2,importance = TRUE)
importance<-randomForest(culture~.,learning1,mtry=2,importance = TRUE)
---
require(e1071)
require(randomForest)
require(ggplot2)
# 予め作成したノードリストを読み込む
set<-read.csv("taggraph_nodes.csv",fileEncoding = "CP932")
set<-na.omit(set)
#再生数などの情報は既にポイントで反映していると考え削除しておく。計算結果を最終的にsetに貼って出力しGephiでまた使う
set1<-set[,c(-2,-3,-10,-17,-18,-19)]
plus<-subset(set1,set1$Points>2.5*mean(set1$Points))
minus<-subset(set1,set1$Points<0.05*mean(set1$Points))
plus$culture<-as.factor(1)
minus$culture<-as.factor(0)
# チューニング用と学習用に分ける
plus1<-plus[c(1:47),]
plus2<-plus[c(48:94),]
minus1<-minus[c(1:46),]
minus2<-minus[c(47:92),]
learning<-data.frame(rbind(plus1,minus1))
tuning<-data.frame(rbind(plus2,minus2))
# 日付型は使えないのでnumericに。あと、Hubは削除。
learning1<-learning[,c(-1,-5,-16)]
learning1$ave_starttime<-as.numeric(learning1$ave_starttime)
learning1$Authority<-as.numeric(learning1$Authority)
# 最適なところで重要度を計算したい
tuneRF(learning1[,-14],learning1[,14],doBest=T)
# mtry=2が最適な模様
# 文字化けに気をつけて。。。
importance<-randomForest(culture~.,learning1,mtry=2,importance = TRUE)
# 日付型は使えないのでnumericに。あと、Hubは削除。
learning1<-learning[,c(-1,-5,-16)]
learning1$ave_starttime<-as.numeric(learning1$ave_starttime)
learning1$Authority<-as.numeric(learning1$Authority)
# 最適なところで重要度を計算したい
tuneRF(learning1[,-14],learning1[,14],doBest=T)
# mtry=2が最適な模様
# 文字化けに気をつけて。。。
importance<-randomForest(culture~.,learning1,mtry=3,importance = TRUE)
plus1<-plus[c(1:31),]
plus2<-plus[c(32:63),]
plus3<-plus[c(64:94),]
minus1<-minus[c(1:30),]
minus2<-minus[c(31:61),]
minus3<-minus[c(62:92),]
learning<-data.frame(rbind(plus1,minus1))
tuning<-data.frame(rbind(plus2,minus2))
test<-data.frame(rbind(plus3,minus3))
learning1<-learning[,c(-1,-5,-16)]
learning1$ave_starttime<-as.numeric(learning1$ave_starttime)
learning1$Authority<-as.numeric(learning1$Authority)
tuning1<-tuning[,c(-1,-5,-16)]
tuning1$ave_starttime<-as.numeric(tuning1$ave_starttime)
tuning1$Authority<-as.numeric(tuning1$Authority)
test1<-test[,c(-1,-5,-16)]
test1$ave_starttime<-as.numeric(test1$ave_starttime)
test1$Authority<-as.numeric(test1$Authority)
View(learning1)
View(test1)
View(tuning1)
